{
  "info": {
    "_postman_id": "12345678-1234-1234-1234-123456789abc",
    "name": "Financly Dashboard API",
    "description": "Complete API testing collection for Financly Dashboard with authentication and transaction management",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12345678"
  },
  "item": [
    {
      "name": "🔐 Authentication",
      "item": [
        {
          "name": "Register New User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has token and user\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "    pm.expect(jsonData.user).to.have.property('name');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    ",
                  "    // Save token for future requests",
                  "    pm.environment.set(\"auth_token\", jsonData.token);",
                  "    pm.environment.set(\"user_id\", jsonData.user.id);",
                  "});",
                  "",
                  "pm.test(\"Token is valid JWT format\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var token = jsonData.token;",
                  "    pm.expect(token.split('.')).to.have.lengthOf(3);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new user account with name, email, and password"
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Login successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    ",
                  "    // Save token for authenticated requests",
                  "    pm.environment.set(\"auth_token\", jsonData.token);",
                  "});",
                  "",
                  "pm.test(\"User data is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.email).to.equal(\"john.doe@example.com\");",
                  "    pm.expect(jsonData.user.name).to.equal(\"John Doe\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with existing user credentials"
          },
          "response": []
        },
        {
          "name": "Login - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error message is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.equal(\"Invalid credentials\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"wrongpassword\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Test login with invalid credentials"
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints for user registration and login"
    },
    {
      "name": "💰 Transactions",
      "item": [
        {
          "name": "Get All Transactions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has transactions and pagination\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('transactions');",
                  "    pm.expect(jsonData).to.have.property('pagination');",
                  "    pm.expect(jsonData.transactions).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Pagination structure is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.pagination).to.have.property('page');",
                  "    pm.expect(jsonData.pagination).to.have.property('limit');",
                  "    pm.expect(jsonData.pagination).to.have.property('total');",
                  "    pm.expect(jsonData.pagination).to.have.property('pages');",
                  "});",
                  "",
                  "if (pm.response.json().transactions.length > 0) {",
                  "    pm.test(\"Transaction structure is correct\", function () {",
                  "        var transaction = pm.response.json().transactions[0];",
                  "        pm.expect(transaction).to.have.property('id');",
                  "        pm.expect(transaction).to.have.property('date');",
                  "        pm.expect(transaction).to.have.property('amount');",
                  "        pm.expect(transaction).to.have.property('category');",
                  "        pm.expect(transaction).to.have.property('status');",
                  "        pm.expect(transaction).to.have.property('user_id');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/transactions?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "transactions"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get paginated list of transactions"
          },
          "response": []
        },
        {
          "name": "Get Transactions with Filters",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Filtered results are correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.transactions.length > 0) {",
                  "        jsonData.transactions.forEach(function(transaction) {",
                  "            pm.expect(transaction.category).to.equal(\"Revenue\");",
                  "            pm.expect(transaction.status).to.equal(\"Paid\");",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/transactions?page=1&limit=5&category=Revenue&status=Paid",
              "host": ["{{base_url}}"],
              "path": ["api", "transactions"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "5"
                },
                {
                  "key": "category",
                  "value": "Revenue"
                },
                {
                  "key": "status",
                  "value": "Paid"
                }
              ]
            },
            "description": "Get transactions with category and status filters"
          },
          "response": []
        },
        {
          "name": "Search Transactions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Search results contain search term\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.transactions.length > 0) {",
                  "        var hasSearchTerm = jsonData.transactions.some(function(transaction) {",
                  "            return transaction.user_id.includes(\"user_001\") || ",
                  "                   transaction.amount.toString().includes(\"user_001\");",
                  "        });",
                  "        pm.expect(hasSearchTerm).to.be.true;",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/transactions?search=user_001",
              "host": ["{{base_url}}"],
              "path": ["api", "transactions"],
              "query": [
                {
                  "key": "search",
                  "value": "user_001"
                }
              ]
            },
            "description": "Search transactions by user ID or amount"
          },
          "response": []
        },
        {
          "name": "Create New Transaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Transaction created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.amount).to.equal(2500.50);",
                  "    pm.expect(jsonData.category).to.equal(\"Revenue\");",
                  "    pm.expect(jsonData.status).to.equal(\"Paid\");",
                  "    pm.expect(jsonData.user_id).to.equal(\"user_test_001\");",
                  "    ",
                  "    // Save transaction ID for update/delete tests",
                  "    pm.environment.set(\"transaction_id\", jsonData.id);",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('date');",
                  "    pm.expect(jsonData).to.have.property('createdAt');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 2500.50,\n  \"category\": \"Revenue\",\n  \"status\": \"Paid\",\n  \"user_id\": \"user_test_001\",\n  \"user_profile\": \"https://thispersondoesnotexist.com/\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/transactions",
              "host": ["{{base_url}}"],
              "path": ["api", "transactions"]
            },
            "description": "Create a new transaction"
          },
          "response": []
        },
        {
          "name": "Create Transaction - Expense",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Expense transaction created\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.category).to.equal(\"Expense\");",
                  "    pm.expect(jsonData.status).to.equal(\"Pending\");",
                  "    ",
                  "    // Save another transaction ID",
                  "    pm.environment.set(\"expense_transaction_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 1200.75,\n  \"category\": \"Expense\",\n  \"status\": \"Pending\",\n  \"user_id\": \"user_test_002\",\n  \"user_profile\": \"https://thispersondoesnotexist.com/\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/transactions",
              "host": ["{{base_url}}"],
              "path": ["api", "transactions"]
            },
            "description": "Create an expense transaction"
          },
          "response": []
        },
        {
          "name": "Update Transaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Transaction updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.equal(\"Transaction updated successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 3000.00,\n  \"status\": \"Pending\",\n  \"user_id\": \"user_updated_001\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/transactions?id={{transaction_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "transactions"],
              "query": [
                {
                  "key": "id",
                  "value": "{{transaction_id}}"
                }
              ]
            },
            "description": "Update an existing transaction"
          },
          "response": []
        },
        {
          "name": "Delete Transaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Transaction deleted successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.equal(\"Transaction deleted successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/transactions?id={{expense_transaction_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "transactions"],
              "query": [
                {
                  "key": "id",
                  "value": "{{expense_transaction_id}}"
                }
              ]
            },
            "description": "Delete a transaction"
          },
          "response": []
        },
        {
          "name": "Export Transactions CSV",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"CSV export successful\", function () {",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/csv\");",
                  "    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.include(\"attachment\");",
                  "    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.include(\"transactions.csv\");",
                  "});",
                  "",
                  "pm.test(\"CSV content is valid\", function () {",
                  "    var csvContent = pm.response.text();",
                  "    pm.expect(csvContent).to.include(\"id,date,amount,category,status,user_id\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/transactions/export?columns=id,date,amount,category,status,user_id",
              "host": ["{{base_url}}"],
              "path": ["api", "transactions", "export"],
              "query": [
                {
                  "key": "columns",
                  "value": "id,date,amount,category,status,user_id"
                }
              ]
            },
            "description": "Export transactions as CSV file"
          },
          "response": []
        }
      ],
      "description": "Transaction management endpoints"
    },
    {
      "name": "🚫 Error Testing",
      "item": [
        {
          "name": "Unauthorized Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 or 500\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([401, 500]);",
                  "});",
                  "",
                  "pm.test(\"Error response structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid_token_here"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/transactions",
              "host": ["{{base_url}}"],
              "path": ["api", "transactions"]
            },
            "description": "Test unauthorized access"
          },
          "response": []
        },
        {
          "name": "Create Transaction - Missing Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 or 500\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 100\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/transactions",
              "host": ["{{base_url}}"],
              "path": ["api", "transactions"]
            },
            "description": "Test creating transaction with missing required fields"
          },
          "response": []
        },
        {
          "name": "Update Non-existent Transaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 or 500\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([404, 500]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 500\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/transactions?id=nonexistent_id",
              "host": ["{{base_url}}"],
              "path": ["api", "transactions"],
              "query": [
                {
                  "key": "id",
                  "value": "nonexistent_id"
                }
              ]
            },
            "description": "Test updating a non-existent transaction"
          },
          "response": []
        },
        {
          "name": "Delete Non-existent Transaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 or 500\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([404, 500]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/transactions?id=nonexistent_id",
              "host": ["{{base_url}}"],
              "path": ["api", "transactions"],
              "query": [
                {
                  "key": "id",
                  "value": "nonexistent_id"
                }
              ]
            },
            "description": "Test deleting a non-existent transaction"
          },
          "response": []
        }
      ],
      "description": "Error handling and edge case testing"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": ["// Global pre-request script", "console.log('Running request to: ' + pm.request.url);"]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has proper headers', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.exist;",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "transaction_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "expense_transaction_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    }
  ]
}
